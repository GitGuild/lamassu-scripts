#!/usr/bin/env node

'use strict';

var DBH = require('dbh-pg');
var P = require('bluebird');
var using = P.using;
var argv = process.argv.slice(2);
var _ = require('lodash');
var conString = require('../lib/db');

var db = new DBH(conString);
var name, top, bottom, fingerprint;

function usage() {
  console.log('Reset bill counts for dispenser.');
  console.log('Usage: ssu-bills [<machine name>] [<top count> <bottom count>]');
  console.log('\nExample: ssu-bills fancy-horse 200 50');
  console.log('Resets top cartridge to 200 bills, bottom cartridge to 50 bills.');
  console.log('If you\'re only operating one machine, machine name is optional.\n');
}

function printConfig(counts) {
  if (!counts) return console.log('No bill counts are recorded for this machine yet.');
  console.log('Name: %s, Top: %d, Bottom: %d', name, counts.count1, counts.count2);
}

function bail(msg) {
  console.log(msg);
  process.exit(2);
}

function validateArgs() {
  function bad(msg) { if (msg) console.log('Error: %s\n', msg); return false; }
  if (argv.length !== 2 && argv.length !== 3) return bad();
  if (argv.length === 3) name = argv.shift();
  top = argv.shift();
  bottom = argv.shift();
  function valid(arg) { return _.isNumber(parseInt(arg, 10)) && arg > 0; }
  if (!_.every([top, bottom], valid)) return bad('All values must be positive numbers');
  return true;
}

var badArgs = !validateArgs();
if (badArgs) usage();

using(db.conn(), function(con) {
  return con
  .fetchAll('SELECT name, fingerprint FROM devices')
  .then(function(rows) {
    if (rows.length === 0) bail('No machines are paired yet.');
    if (!name && rows.length !== 1) bail('You have multiple machines, please supply a machine name.');
    if (!name) name = rows[0].name;
    var chosen = _.find(rows, {name: name});
    if (!chosen) bail('No such machine: ' + name);
    fingerprint = chosen.fingerprint;
    return this.fetchOne('SELECT count1, count2 FROM dispenses WHERE device_fingerprint=$1 ORDER BY id DESC', [fingerprint]);
  })
  .then(function(row) {
    console.log('\nPrevious count:');
    printConfig(row);
    if (badArgs) process.exit(5);
    var rec = {
      device_fingerprint: fingerprint,
      count1: top,
      count2: bottom,
      refill: true,
      dispense1: '0',
      reject1: '0',
      dispense2: '0',
      reject2: '0'
    };
    return this.insert('dispenses', rec);
  })
  .then(function() {
    console.log('\nNew count:');
    printConfig({count1: top, count2: bottom});
    process.exit(0);
  })
  .catch(function(err) {
    console.log(err.message);
    console.log(err.stack);
    process.exit(3);
  });
});
